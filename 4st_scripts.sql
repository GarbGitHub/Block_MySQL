USE block;

-- ПРЕДСТАВЛЕНИЯ
-- Представление `vw_saves` Результаты расчетов, которые сохранили пользователи:
SELECT * FROM vw_saves;  -- все сохраненки всех пользователей (  '*' в запросе, так как во вью уже есть выборка)
SELECT * FROM vw_saves WHERE user_id = 41;  -- сохраненки определенного пользователя
SELECT * FROM vw_saves WHERE user_id = 41 AND `type` = 'A';  -- Альтернативные расчеты определенного пользователя

-- TOP 5 (рейтинг пользователей, кто больше потратил дененг в расчетах, вызов представления)
SELECT * FROM  vw_top5_users;

-- ПРОЧИЕ ЗАПРОСЫ
-- Проверка на целостность, 
SELECT * FROM vw_saves WHERE user_id = 24;  -- сохраненки определенного пользователя 
UPDATE users SET id = 240 WHERE id = 24; -- заменим пользователю id
SELECT * FROM vw_saves WHERE user_id = 240;  -- сохраненки определенного пользователя 
UPDATE users SET id = 24 WHERE id = 240;  -- вернем как было

-- Расчеты пользователей, зарегистрированных в 2020 году
SELECT YEAR(u.created_at) AS data_reg, srd.user_id, srd.id AS save_id, srd.name_block , srd.name_wall 
FROM save_rezult_data srd 
JOIN users u WHERE YEAR(u.created_at) = 2020 GROUP BY srd.id;

-- Тест триггера на обновление данных, пользователь решил заменить некоторые параметры блока, триггер должен пересчитать все характеристики блока с учетом новых данных.
SELECT id, length_block_u, density_block_u, massa_1_block_u, name_block_u FROM block_user WHERE id = 1;  -- > - смотрим параметры блока: 1, 600, NULL, 4, 600*250*60
UPDATE block_user SET length_block_u = 700, density_block_u = 600 WHERE id = 1;  -- проверка тригера на обновление даннах пользователем, изменим длину и плотность блока
SELECT id, length_block_u, density_block_u, massa_1_block_u, name_block_u FROM block_user WHERE id = 1;  -- > 1, 700, 600, 5.25, D600 700*250*50 (пересчиталась масса блока, обновилось название)

-- ПРОЦЕДУРЫ, СЧИТАЕМ, СОХРАНЯЕМ:
-- Блоки по дэфолту - Стены пользователя
-- Параметры: user id / id блока по из справочника по дефолту / id стены пользователя / 1 - запустит транзакцию сохранения сохранения в постоянную таблицу
CALL pr_raschet_save_default_block(41, 7, 37, 1);  -- расчитать и сохранить (для наглядности выводятся все сохраненки данного пользователя)
CALL pr_raschet_save_default_block(45, 8, 72, 0);  -- расчитать и не сохранять, в результате пусто, так как 0
CALL pr_raschet_save_default_block(45, 8, 72, 1);  -- расчитать и не сохранять в результатее появится 1-ая сохраненка (использовался параметр 1)

-- Блоки Пользователя - Стены пользователя
-- Параметры: user id / id блока по из справочника по дефолту / id стены пользователя / 1 - запустит транзакцию сохранения в постоянную таблицу
CALL pr_raschet_save_user_block(34, 47, 47, 1);  --  расчитать и сохранить
CALL pr_raschet_save_user_block(35, 48, 94, 0);  -- расчитать и не сохранять, изменяя 0 на 1, в списке сохраненок будут прибавляться записи

-- ПРОЦЕДУРЫ РАСЧЕТА СМЕТЫ
/*
 * Расчет сметы, используя процедуру pr_smeta
 * Процедура расчитывает смету до 4-ых сохраненных расчетов (до 4 стен)
 * Параметры: user id / id расчета 1 / id расчета 2/ id расчета 3 / id расчета 4
 */
CALL pr_smeta (36, 38, 21, 20, 41);  -- Посчитаем смету 4 сохранений у пользователя id = 36
CALL pr_smeta (21, 24, 21, 25, NULL);  -- Посчитаем смету 3 сохранений у пользователя id = 21
-- для подбора необходимы параметры - запрос ниже
SELECT user_id, save_id AS save_id FROM vw_saves  WHERE `type` = 'R' ORDER BY user_id;  --  id пользователей, id сохраненных расчетов



